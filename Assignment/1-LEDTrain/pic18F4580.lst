

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Tue Jul 10 12:44:03 2018

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    15  0000                     
    16                           	psect	idataCOMRAM
    17  002EAD                     __pidataCOMRAM:
    18                           	opt stack 0
    19                           
    20                           ;initializer for _cond
    21  002EAD  0001               	dw	1
    22                           
    23                           ;initializer for _flag
    24  002EAF  0001               	dw	1
    25                           
    26                           ;initializer for _num
    27  002EB1  0001               	dw	1
    28                           
    29                           ;initializer for _mask
    30  002EB3  01                 	db	1
    31  0000                     _ADCON1	set	4033
    32  0000                     _PORTB	set	3969
    33  0000                     _TRISB	set	3987
    34                           
    35                           ; #config settings
    36  0000                     
    37                           	psect	cinit
    38  002EC2                     __pcinit:
    39                           	opt stack 0
    40  002EC2                     start_initialization:
    41                           	opt stack 0
    42  002EC2                     __initialization:
    43                           	opt stack 0
    44                           
    45                           ; Initialize objects allocated to COMRAM (7 bytes)
    46                           ; load TBLPTR registers with __pidataCOMRAM
    47  002EC2  0EAD               	movlw	low __pidataCOMRAM
    48  002EC4  6EF6               	movwf	tblptrl,c
    49  002EC6  0E2E               	movlw	high __pidataCOMRAM
    50  002EC8  6EF7               	movwf	tblptrh,c
    51  002ECA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    52  002ECC  6EF8               	movwf	tblptru,c
    53  002ECE  EE00  F001         	lfsr	0,__pdataCOMRAM
    54  002ED2  EE10 F007          	lfsr	1,7
    55  002ED6                     copy_data0:
    56  002ED6  0009               	tblrd		*+
    57  002ED8  CFF5 FFEE          	movff	tablat,postinc0
    58  002EDC  50E5               	movf	postdec1,w,c
    59  002EDE  50E1               	movf	fsr1l,w,c
    60  002EE0  E1FA               	bnz	copy_data0
    61  002EE2                     end_of_initialization:
    62                           	opt stack 0
    63  002EE2                     __end_of__initialization:
    64                           	opt stack 0
    65  002EE2  0100               	movlb	0
    66  002EE4  EF74  F017         	goto	_main	;jump to C main() function
    67                           tblptru	equ	0xFF8
    68                           tblptrh	equ	0xFF7
    69                           tblptrl	equ	0xFF6
    70                           tablat	equ	0xFF5
    71                           postinc0	equ	0xFEE
    72                           postdec1	equ	0xFE5
    73                           fsr1l	equ	0xFE1
    74                           
    75                           	psect	dataCOMRAM
    76  000001                     __pdataCOMRAM:
    77                           	opt stack 0
    78  000001                     _cond:
    79                           	opt stack 0
    80  000001                     	ds	2
    81  000003                     _flag:
    82                           	opt stack 0
    83  000003                     	ds	2
    84  000005                     _num:
    85                           	opt stack 0
    86  000005                     	ds	2
    87  000007                     _mask:
    88                           	opt stack 0
    89  000007                     	ds	1
    90                           tblptru	equ	0xFF8
    91                           tblptrh	equ	0xFF7
    92                           tblptrl	equ	0xFF6
    93                           tablat	equ	0xFF5
    94                           postinc0	equ	0xFEE
    95                           postdec1	equ	0xFE5
    96                           fsr1l	equ	0xFE1
    97                           
    98                           	psect	cstackCOMRAM
    99  000008                     __pcstackCOMRAM:
   100                           	opt stack 0
   101  000008                     ??_right_to_left:
   102  000008                     
   103                           ; 1 bytes @ 0x0
   104  000008                     	ds	2
   105  00000A                     main@i:
   106                           	opt stack 0
   107                           
   108                           ; 4 bytes @ 0x2
   109  00000A                     	ds	4
   110                           tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           postinc0	equ	0xFEE
   115                           postdec1	equ	0xFE5
   116                           fsr1l	equ	0xFE1
   117                           
   118 ;;
   119 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   120 ;;
   121 ;; *************** function _main *****************
   122 ;; Defined at:
   123 ;;		line 15 in file "main.c"
   124 ;; Parameters:    Size  Location     Type
   125 ;;		None
   126 ;; Auto vars:     Size  Location     Type
   127 ;;  i               4    2[COMRAM] unsigned long 
   128 ;; Return value:  Size  Location     Type
   129 ;;                  1    wreg      void 
   130 ;; Registers used:
   131 ;;		wreg, status,2, status,0, cstack
   132 ;; Tracked objects:
   133 ;;		On entry : 0/0
   134 ;;		On exit  : 0/0
   135 ;;		Unchanged: 0/0
   136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   137 ;;      Params:         0       0       0       0       0       0       0
   138 ;;      Locals:         4       0       0       0       0       0       0
   139 ;;      Temps:          0       0       0       0       0       0       0
   140 ;;      Totals:         4       0       0       0       0       0       0
   141 ;;Total ram usage:        4 bytes
   142 ;; Hardware stack levels required when called:    1
   143 ;; This function calls:
   144 ;;		_init_config
   145 ;;		_left_to_right
   146 ;;		_right_to_left
   147 ;; This function is called by:
   148 ;;		Startup code after reset
   149 ;; This function uses a non-reentrant model
   150 ;;
   151                           
   152                           	psect	text0
   153  002EE8                     __ptext0:
   154                           	opt stack 0
   155  002EE8                     _main:
   156                           	opt stack 30
   157                           
   158                           ;main.c: 17: unsigned long i;
   159                           ;main.c: 20: init_config();
   160                           
   161                           ;incstack = 0
   162  002EE8  EC5A  F017         	call	_init_config	;wreg free
   163  002EEC                     l696:
   164                           
   165                           ;main.c: 22: {
   166                           ;main.c: 23: if(flag)
   167  002EEC  5003               	movf	_flag,w,c
   168  002EEE  1004               	iorwf	_flag+1,w,c
   169  002EF0  B4D8               	btfsc	status,2,c
   170  002EF2  D003               	goto	l700
   171                           
   172                           ;main.c: 24: {
   173                           ;main.c: 25: left_to_right();
   174  002EF4  ECCA  F017         	call	_left_to_right	;wreg free
   175                           
   176                           ;main.c: 26: }
   177  002EF8  D002               	goto	l702
   178  002EFA                     l700:
   179                           
   180                           ;main.c: 27: else
   181                           ;main.c: 28: {
   182                           ;main.c: 29: right_to_left();
   183  002EFA  EC96  F017         	call	_right_to_left	;wreg free
   184  002EFE                     l702:
   185                           
   186                           ;main.c: 30: }
   187                           ;main.c: 32: for(i = 100000; i--; );
   188  002EFE  0EA0               	movlw	160
   189  002F00  6E0A               	movwf	main@i,c
   190  002F02  0E86               	movlw	134
   191  002F04  6E0B               	movwf	main@i+1,c
   192  002F06  0E01               	movlw	1
   193  002F08  6E0C               	movwf	main@i+2,c
   194  002F0A  0E00               	movlw	0
   195  002F0C  6E0D               	movwf	main@i+3,c
   196  002F0E                     l704:
   197  002F0E  060A               	decf	main@i,f,c
   198  002F10  0E00               	movlw	0
   199  002F12  5A0B               	subwfb	main@i+1,f,c
   200  002F14  5A0C               	subwfb	main@i+2,f,c
   201  002F16  5A0D               	subwfb	main@i+3,f,c
   202  002F18  280A               	incf	main@i,w,c
   203  002F1A  E1F9               	bnz	l704
   204  002F1C  280B               	incf	main@i+1,w,c
   205  002F1E  E1F7               	bnz	l704
   206  002F20  280C               	incf	main@i+2,w,c
   207  002F22  E1F5               	bnz	l704
   208  002F24  280D               	incf	main@i+3,w,c
   209  002F26  B4D8               	btfsc	status,2,c
   210  002F28  D7E1               	goto	l696
   211  002F2A  D7F1               	goto	l704
   212  002F2C                     __end_of_main:
   213                           	opt stack 0
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           postdec1	equ	0xFE5
   220                           fsr1l	equ	0xFE1
   221                           status	equ	0xFD8
   222                           
   223 ;; *************** function _right_to_left *****************
   224 ;; Defined at:
   225 ;;		line 4 in file "right_to_left.c"
   226 ;; Parameters:    Size  Location     Type
   227 ;;		None
   228 ;; Auto vars:     Size  Location     Type
   229 ;;		None
   230 ;; Return value:  Size  Location     Type
   231 ;;                  1    wreg      void 
   232 ;; Registers used:
   233 ;;		wreg, status,2, status,0
   234 ;; Tracked objects:
   235 ;;		On entry : 0/0
   236 ;;		On exit  : 0/0
   237 ;;		Unchanged: 0/0
   238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   239 ;;      Params:         0       0       0       0       0       0       0
   240 ;;      Locals:         0       0       0       0       0       0       0
   241 ;;      Temps:          2       0       0       0       0       0       0
   242 ;;      Totals:         2       0       0       0       0       0       0
   243 ;;Total ram usage:        2 bytes
   244 ;; Hardware stack levels used:    1
   245 ;; This function calls:
   246 ;;		Nothing
   247 ;; This function is called by:
   248 ;;		_main
   249 ;; This function uses a non-reentrant model
   250 ;;
   251                           
   252                           	psect	text1
   253  002F2C                     __ptext1:
   254                           	opt stack 0
   255  002F2C                     _right_to_left:
   256                           	opt stack 30
   257                           
   258                           ;right_to_left.c: 7: if(cond)
   259                           
   260                           ;incstack = 0
   261  002F2C  5001               	movf	_cond,w,c
   262  002F2E  1002               	iorwf	_cond+1,w,c
   263  002F30  B4D8               	btfsc	status,2,c
   264  002F32  D015               	goto	l672
   265                           
   266                           ;right_to_left.c: 8: {
   267                           ;right_to_left.c: 9: num = num | mask;
   268  002F34  5005               	movf	_num,w,c
   269  002F36  1007               	iorwf	_mask,w,c
   270  002F38  6E05               	movwf	_num,c
   271  002F3A  5006               	movf	_num+1,w,c
   272  002F3C  6E06               	movwf	_num+1,c
   273                           
   274                           ;right_to_left.c: 10: mask = mask >> 1;
   275  002F3E  90D8               	bcf	status,0,c
   276  002F40  3007               	rrcf	_mask,w,c
   277  002F42  6E07               	movwf	_mask,c
   278                           
   279                           ;right_to_left.c: 11: PORTB = num;
   280  002F44  C005  FF81         	movff	_num,3969	;volatile
   281                           
   282                           ;right_to_left.c: 12: if(num == 255)
   283  002F48  2805               	incf	_num,w,c
   284  002F4A  1006               	iorwf	_num+1,w,c
   285  002F4C  A4D8               	btfss	status,2,c
   286  002F4E  0012               	return	
   287                           
   288                           ;right_to_left.c: 13: {
   289                           ;right_to_left.c: 14: cond = 0;
   290  002F50  0E00               	movlw	0
   291  002F52  6E02               	movwf	_cond+1,c
   292  002F54  0E00               	movlw	0
   293  002F56  6E01               	movwf	_cond,c
   294                           
   295                           ;right_to_left.c: 15: mask = 128;
   296  002F58  0E80               	movlw	128
   297  002F5A  6E07               	movwf	_mask,c
   298                           
   299                           ;right_to_left.c: 16: }
   300                           ;right_to_left.c: 17: }
   301  002F5C  0012               	return	
   302  002F5E                     l672:
   303                           
   304                           ;right_to_left.c: 18: else
   305                           ;right_to_left.c: 19: {
   306                           ;right_to_left.c: 20: num = num >> 1;
   307  002F5E  3406               	rlcf	_num+1,w,c
   308  002F60  3006               	rrcf	_num+1,w,c
   309  002F62  6E08               	movwf	??_right_to_left& (0+255),c
   310  002F64  3005               	rrcf	_num,w,c
   311  002F66  6E05               	movwf	_num,c
   312  002F68  C008  F006         	movff	??_right_to_left,_num+1
   313                           
   314                           ;right_to_left.c: 21: PORTB = num;
   315  002F6C  C005  FF81         	movff	_num,3969	;volatile
   316                           
   317                           ;right_to_left.c: 22: mask = mask >> 1;
   318  002F70  90D8               	bcf	status,0,c
   319  002F72  3007               	rrcf	_mask,w,c
   320  002F74  6E07               	movwf	_mask,c
   321                           
   322                           ;right_to_left.c: 23: if(num == 0)
   323  002F76  5005               	movf	_num,w,c
   324  002F78  1006               	iorwf	_num+1,w,c
   325  002F7A  A4D8               	btfss	status,2,c
   326  002F7C  0012               	return	
   327                           
   328                           ;right_to_left.c: 24: {
   329                           ;right_to_left.c: 25: flag = 1;
   330  002F7E  0E00               	movlw	0
   331  002F80  6E04               	movwf	_flag+1,c
   332  002F82  0E01               	movlw	1
   333  002F84  6E03               	movwf	_flag,c
   334                           
   335                           ;right_to_left.c: 26: cond = 1;
   336  002F86  0E00               	movlw	0
   337  002F88  6E02               	movwf	_cond+1,c
   338  002F8A  0E01               	movlw	1
   339  002F8C  6E01               	movwf	_cond,c
   340                           
   341                           ;right_to_left.c: 28: mask = 1;
   342  002F8E  0E01               	movlw	1
   343  002F90  6E07               	movwf	_mask,c
   344  002F92  0012               	return	
   345  002F94                     __end_of_right_to_left:
   346                           	opt stack 0
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           postdec1	equ	0xFE5
   353                           fsr1l	equ	0xFE1
   354                           status	equ	0xFD8
   355                           
   356 ;; *************** function _left_to_right *****************
   357 ;; Defined at:
   358 ;;		line 4 in file "left_to_right.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;		None
   361 ;; Auto vars:     Size  Location     Type
   362 ;;		None
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, status,2, status,0
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   372 ;;      Params:         0       0       0       0       0       0       0
   373 ;;      Locals:         0       0       0       0       0       0       0
   374 ;;      Temps:          0       0       0       0       0       0       0
   375 ;;      Totals:         0       0       0       0       0       0       0
   376 ;;Total ram usage:        0 bytes
   377 ;; Hardware stack levels used:    1
   378 ;; This function calls:
   379 ;;		Nothing
   380 ;; This function is called by:
   381 ;;		_main
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           	psect	text2
   386  002F94                     __ptext2:
   387                           	opt stack 0
   388  002F94                     _left_to_right:
   389                           	opt stack 30
   390                           
   391                           ;left_to_right.c: 7: if(cond)
   392                           
   393                           ;incstack = 0
   394  002F94  5001               	movf	_cond,w,c
   395  002F96  1002               	iorwf	_cond+1,w,c
   396  002F98  B4D8               	btfsc	status,2,c
   397  002F9A  D015               	goto	l686
   398                           
   399                           ;left_to_right.c: 8: {
   400                           ;left_to_right.c: 9: num = num | mask;
   401  002F9C  5005               	movf	_num,w,c
   402  002F9E  1007               	iorwf	_mask,w,c
   403  002FA0  6E05               	movwf	_num,c
   404  002FA2  5006               	movf	_num+1,w,c
   405  002FA4  6E06               	movwf	_num+1,c
   406                           
   407                           ;left_to_right.c: 10: mask = mask << 1;
   408  002FA6  5007               	movf	_mask,w,c
   409  002FA8  2407               	addwf	_mask,w,c
   410  002FAA  6E07               	movwf	_mask,c
   411                           
   412                           ;left_to_right.c: 11: PORTB = num;
   413  002FAC  C005  FF81         	movff	_num,3969	;volatile
   414                           
   415                           ;left_to_right.c: 12: if(num == 255)
   416  002FB0  2805               	incf	_num,w,c
   417  002FB2  1006               	iorwf	_num+1,w,c
   418  002FB4  A4D8               	btfss	status,2,c
   419  002FB6  0012               	return	
   420                           
   421                           ;left_to_right.c: 13: {
   422                           ;left_to_right.c: 14: cond = 0;
   423  002FB8  0E00               	movlw	0
   424  002FBA  6E02               	movwf	_cond+1,c
   425  002FBC  0E00               	movlw	0
   426  002FBE  6E01               	movwf	_cond,c
   427                           
   428                           ;left_to_right.c: 15: mask = 1;
   429  002FC0  0E01               	movlw	1
   430  002FC2  6E07               	movwf	_mask,c
   431                           
   432                           ;left_to_right.c: 16: }
   433                           ;left_to_right.c: 17: }
   434  002FC4  0012               	return	
   435  002FC6                     l686:
   436                           
   437                           ;left_to_right.c: 18: else
   438                           ;left_to_right.c: 19: {
   439                           ;left_to_right.c: 20: num = num << 1;
   440  002FC6  90D8               	bcf	status,0,c
   441  002FC8  3405               	rlcf	_num,w,c
   442  002FCA  6E05               	movwf	_num,c
   443  002FCC  3406               	rlcf	_num+1,w,c
   444  002FCE  6E06               	movwf	_num+1,c
   445                           
   446                           ;left_to_right.c: 21: PORTB = num;
   447  002FD0  C005  FF81         	movff	_num,3969	;volatile
   448                           
   449                           ;left_to_right.c: 22: mask = mask << 1;
   450  002FD4  5007               	movf	_mask,w,c
   451  002FD6  2407               	addwf	_mask,w,c
   452  002FD8  6E07               	movwf	_mask,c
   453                           
   454                           ;left_to_right.c: 23: if(num == 0)
   455  002FDA  5005               	movf	_num,w,c
   456  002FDC  1006               	iorwf	_num+1,w,c
   457  002FDE  A4D8               	btfss	status,2,c
   458  002FE0  0012               	return	
   459                           
   460                           ;left_to_right.c: 24: {
   461                           ;left_to_right.c: 25: flag = 0;
   462  002FE2  0E00               	movlw	0
   463  002FE4  6E04               	movwf	_flag+1,c
   464  002FE6  0E00               	movlw	0
   465  002FE8  6E03               	movwf	_flag,c
   466                           
   467                           ;left_to_right.c: 26: cond = 1;
   468  002FEA  0E00               	movlw	0
   469  002FEC  6E02               	movwf	_cond+1,c
   470  002FEE  0E01               	movlw	1
   471  002FF0  6E01               	movwf	_cond,c
   472                           
   473                           ;left_to_right.c: 27: num = 0;
   474  002FF2  0E00               	movlw	0
   475  002FF4  6E06               	movwf	_num+1,c
   476  002FF6  0E00               	movlw	0
   477  002FF8  6E05               	movwf	_num,c
   478                           
   479                           ;left_to_right.c: 28: mask = 128;
   480  002FFA  0E80               	movlw	128
   481  002FFC  6E07               	movwf	_mask,c
   482  002FFE  0012               	return	
   483  003000                     __end_of_left_to_right:
   484                           	opt stack 0
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           postinc0	equ	0xFEE
   490                           postdec1	equ	0xFE5
   491                           fsr1l	equ	0xFE1
   492                           status	equ	0xFD8
   493                           
   494 ;; *************** function _init_config *****************
   495 ;; Defined at:
   496 ;;		line 3 in file "main.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;		None
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, status,2
   505 ;; Tracked objects:
   506 ;;		On entry : 0/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   510 ;;      Params:         0       0       0       0       0       0       0
   511 ;;      Locals:         0       0       0       0       0       0       0
   512 ;;      Temps:          0       0       0       0       0       0       0
   513 ;;      Totals:         0       0       0       0       0       0       0
   514 ;;Total ram usage:        0 bytes
   515 ;; Hardware stack levels used:    1
   516 ;; This function calls:
   517 ;;		Nothing
   518 ;; This function is called by:
   519 ;;		_main
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text3
   524  002EB4                     __ptext3:
   525                           	opt stack 0
   526  002EB4                     _init_config:
   527                           	opt stack 30
   528                           
   529                           ;main.c: 5: ADCON1 = 0x0F;
   530                           
   531                           ;incstack = 0
   532  002EB4  0E0F               	movlw	15
   533  002EB6  6EC1               	movwf	4033,c	;volatile
   534                           
   535                           ;main.c: 7: PORTB = 0x00;
   536  002EB8  0E00               	movlw	0
   537  002EBA  6E81               	movwf	3969,c	;volatile
   538                           
   539                           ;main.c: 9: TRISB = 0x00;
   540  002EBC  0E00               	movlw	0
   541  002EBE  6E93               	movwf	3987,c	;volatile
   542  002EC0  0012               	return		;funcret
   543  002EC2                     __end_of_init_config:
   544                           	opt stack 0
   545  0000                     tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           postdec1	equ	0xFE5
   551                           fsr1l	equ	0xFE1
   552                           status	equ	0xFD8
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           postdec1	equ	0xFE5
   559                           fsr1l	equ	0xFE1
   560                           status	equ	0xFD8
   561                           
   562                           	psect	rparam
   563  0000                     tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           postdec1	equ	0xFE5
   569                           fsr1l	equ	0xFE1
   570                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      6      13
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_right_to_left

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      15
                                              2 COMRAM     4     4      0
                        _init_config
                      _left_to_right
                      _right_to_left
 ---------------------------------------------------------------------------------
 (1) _right_to_left                                        2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _left_to_right                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_config
   _left_to_right
   _right_to_left

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      6       D       1       13.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       D       3        0.0%
DATA                 0      0       D      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Tue Jul 10 12:44:03 2018

            __CFG_OSC$XT 000000                      l700 2EFA                      l702 2EFE  
                    l704 2F0E                      l672 2F5E                      l686 2FC6  
                    l696 2EEC                      _num 0005             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     _flag 0003                     _cond 0001  
                   _main 2EE8                     _mask 0007                     fsr1l 000FE1  
                   start 0000             ___param_bank 000010   __size_of_left_to_right 006C  
                  ?_main 0008             ?_init_config 0008                    _PORTB 000F81  
                  _TRISB 000F93                    main@i 000A           __CFG_BOREN$OFF 000000  
                  tablat 000FF5                    status 000FD8          __initialization 2EC2  
           __end_of_main 2F2C                   ??_main 000A            __activetblptr 000000  
                 _ADCON1 000FC1            _left_to_right 2F94    __end_of_right_to_left 2F94  
           __pdataCOMRAM 0001                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8           ?_left_to_right 0008               __accesstop 0060  
__end_of__initialization 2EE2          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0008     __size_of_init_config 000E          ??_left_to_right 0008  
                __Hparam 0000                  __Lparam 0000                  __pcinit 2EC2  
                __ramtop 0600                  __ptext0 2EE8                  __ptext1 2F2C  
                __ptext2 2F94                  __ptext3 2EB4     end_of_initialization 2EE2  
                postdec1 000FE5                  postinc0 000FEE            __pidataCOMRAM 2EAD  
    start_initialization 2EC2   __size_of_right_to_left 0068            ??_init_config 0008  
          _right_to_left 2F2C      __end_of_init_config 2EC2    __end_of_left_to_right 3000  
         ?_right_to_left 0008                copy_data0 2ED6                 __Hrparam 0000  
               __Lrparam 0000              _init_config 2EB4            __size_of_main 0044  
        ??_right_to_left 0008  
